'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Plus, Trash2, TestTube, Activity, Eye, EyeOff } from 'lucide-react';\n\ninterface Exchange {\n  name: string;\n  displayName: string;\n  description: string;\n  supportedFeatures: string[];\n  requiredCredentials: string[];\n}\n\ninterface ConnectedExchange {\n  id: string;\n  name: string;\n  label: string | null;\n  status: 'connected' | 'error';\n}\n\ninterface ExchangeCredentials {\n  apiKey: string;\n  secretKey: string;\n  passphrase?: string;\n  sandbox?: boolean;\n}\n\ninterface Balance {\n  currency: string;\n  available: string;\n  locked: string;\n  total: string;\n  exchange: string;\n  exchangeName: string;\n}\n\nexport default function ExchangeManager() {\n  const [availableExchanges, setAvailableExchanges] = useState<Exchange[]>([]);\n  const [connectedExchanges, setConnectedExchanges] = useState<ConnectedExchange[]>([]);\n  const [balances, setBalances] = useState<Balance[]>([]);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [selectedExchange, setSelectedExchange] = useState<Exchange | null>(null);\n  const [credentials, setCredentials] = useState<ExchangeCredentials>({\n    apiKey: '',\n    secretKey: '',\n    passphrase: '',\n    sandbox: false\n  });\n  const [label, setLabel] = useState('');\n  const [showCredentials, setShowCredentials] = useState<{[key: string]: boolean}>({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    fetchAvailableExchanges();\n    fetchConnectedExchanges();\n    fetchBalances();\n  }, []);\n\n  const fetchAvailableExchanges = async () => {\n    try {\n      const token = localStorage.getItem('accessToken');\n      const response = await fetch('http://localhost:5001/api/exchanges/available', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        setAvailableExchanges(data.data.exchanges);\n      }\n    } catch (error) {\n      console.error('Failed to fetch available exchanges:', error);\n    }\n  };\n\n  const fetchConnectedExchanges = async () => {\n    try {\n      const token = localStorage.getItem('accessToken');\n      const response = await fetch('http://localhost:5001/api/exchanges/connected', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        setConnectedExchanges(data.data.exchanges);\n      }\n    } catch (error) {\n      console.error('Failed to fetch connected exchanges:', error);\n    }\n  };\n\n  const fetchBalances = async () => {\n    try {\n      const token = localStorage.getItem('accessToken');\n      const response = await fetch('http://localhost:5001/api/exchanges/balances', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        setBalances(data.data.balances);\n      }\n    } catch (error) {\n      console.error('Failed to fetch balances:', error);\n    }\n  };\n\n  const connectExchange = async () => {\n    if (!selectedExchange) return;\n    \n    setLoading(true);\n    setError('');\n    \n    try {\n      const token = localStorage.getItem('accessToken');\n      const response = await fetch('http://localhost:5001/api/exchanges/connect', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          exchangeName: selectedExchange.name,\n          credentials,\n          label: label || null\n        })\n      });\n      \n      const data = await response.json();\n      \n      if (response.ok) {\n        setShowAddModal(false);\n        setCredentials({ apiKey: '', secretKey: '', passphrase: '', sandbox: false });\n        setLabel('');\n        setSelectedExchange(null);\n        fetchConnectedExchanges();\n        fetchBalances();\n        alert('Exchange connected successfully!');\n      } else {\n        setError(data.message || 'Failed to connect exchange');\n      }\n    } catch (error) {\n      setError('Network error occurred');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const disconnectExchange = async (exchangeKey: string) => {\n    if (!confirm('Are you sure you want to disconnect this exchange?')) return;\n    \n    try {\n      const token = localStorage.getItem('accessToken');\n      const response = await fetch(`http://localhost:5001/api/exchanges/disconnect/${exchangeKey}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      \n      if (response.ok) {\n        fetchConnectedExchanges();\n        fetchBalances();\n        alert('Exchange disconnected successfully!');\n      }\n    } catch (error) {\n      console.error('Failed to disconnect exchange:', error);\n    }\n  };\n\n  const testConnection = async (exchangeKey: string) => {\n    try {\n      const token = localStorage.getItem('accessToken');\n      const response = await fetch(`http://localhost:5001/api/exchanges/test/${exchangeKey}`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      \n      const data = await response.json();\n      alert(data.message);\n    } catch (error) {\n      alert('Failed to test connection');\n    }\n  };\n\n  const toggleCredentialVisibility = (field: string) => {\n    setShowCredentials(prev => ({\n      ...prev,\n      [field]: !prev[field]\n    }));\n  };\n\n  const formatBalance = (balance: string) => {\n    const num = parseFloat(balance);\n    return num > 0 ? num.toFixed(8) : '0.00000000';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold\">Exchange Management</h2>\n        <button\n          onClick={() => setShowAddModal(true)}\n          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-colors\"\n        >\n          <Plus className=\"w-4 h-4\" />\n          Connect Exchange\n        </button>\n      </div>\n\n      {/* Connected Exchanges */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">Connected Exchanges</h3>\n        {connectedExchanges.length === 0 ? (\n          <p className=\"text-gray-500\">No exchanges connected yet. Connect your first exchange to get started.</p>\n        ) : (\n          <div className=\"space-y-3\">\n            {connectedExchanges.map((exchange) => (\n              <div key={exchange.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                <div className=\"flex items-center gap-3\">\n                  <div className={`w-3 h-3 rounded-full ${\n                    exchange.status === 'connected' ? 'bg-green-500' : 'bg-red-500'\n                  }`}></div>\n                  <div>\n                    <p className=\"font-medium capitalize\">{exchange.name}</p>\n                    {exchange.label && (\n                      <p className=\"text-sm text-gray-500\">{exchange.label}</p>\n                    )}\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <button\n                    onClick={() => testConnection(exchange.id)}\n                    className=\"p-2 text-blue-600 hover:bg-blue-100 rounded transition-colors\"\n                    title=\"Test Connection\"\n                  >\n                    <TestTube className=\"w-4 h-4\" />\n                  </button>\n                  <button\n                    onClick={() => disconnectExchange(exchange.id)}\n                    className=\"p-2 text-red-600 hover:bg-red-100 rounded transition-colors\"\n                    title=\"Disconnect\"\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Portfolio Overview */}\n      {balances.length > 0 && (\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <h3 className=\"text-lg font-semibold mb-4\">Portfolio Overview</h3>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b\">\n                  <th className=\"text-left py-2\">Asset</th>\n                  <th className=\"text-left py-2\">Exchange</th>\n                  <th className=\"text-right py-2\">Available</th>\n                  <th className=\"text-right py-2\">Locked</th>\n                  <th className=\"text-right py-2\">Total</th>\n                </tr>\n              </thead>\n              <tbody>\n                {balances.map((balance, index) => (\n                  <tr key={index} className=\"border-b\">\n                    <td className=\"py-2 font-medium\">{balance.currency}</td>\n                    <td className=\"py-2 text-gray-600 capitalize\">{balance.exchangeName}</td>\n                    <td className=\"py-2 text-right\">{formatBalance(balance.available)}</td>\n                    <td className=\"py-2 text-right\">{formatBalance(balance.locked)}</td>\n                    <td className=\"py-2 text-right font-medium\">{formatBalance(balance.total)}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n\n      {/* Add Exchange Modal */}\n      {showAddModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg p-6 max-w-md w-full mx-4 max-h-[90vh] overflow-y-auto\">\n            <h3 className=\"text-lg font-semibold mb-4\">Connect Exchange</h3>\n            \n            {!selectedExchange ? (\n              <div className=\"space-y-3\">\n                {availableExchanges.map((exchange) => (\n                  <button\n                    key={exchange.name}\n                    onClick={() => setSelectedExchange(exchange)}\n                    className=\"w-full p-4 border rounded-lg hover:bg-gray-50 text-left transition-colors\"\n                  >\n                    <h4 className=\"font-medium\">{exchange.displayName}</h4>\n                    <p className=\"text-sm text-gray-600 mt-1\">{exchange.description}</p>\n                    <div className=\"flex flex-wrap gap-1 mt-2\">\n                      {exchange.supportedFeatures.map((feature) => (\n                        <span key={feature} className=\"text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded\">\n                          {feature}\n                        </span>\n                      ))}\n                    </div>\n                  </button>\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <h4 className=\"font-medium\">{selectedExchange.displayName}</h4>\n                  <button\n                    onClick={() => setSelectedExchange(null)}\n                    className=\"text-gray-500 hover:text-gray-700\"\n                  >\n                    Back\n                  </button>\n                </div>\n                \n                {error && (\n                  <div className=\"p-3 bg-red-100 border border-red-300 text-red-700 rounded\">\n                    {error}\n                  </div>\n                )}\n                \n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">Label (optional)</label>\n                  <input\n                    type=\"text\"\n                    value={label}\n                    onChange={(e) => setLabel(e.target.value)}\n                    placeholder=\"e.g. Main Account\"\n                    className=\"w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">API Key *</label>\n                  <div className=\"relative\">\n                    <input\n                      type={showCredentials.apiKey ? 'text' : 'password'}\n                      value={credentials.apiKey}\n                      onChange={(e) => setCredentials({...credentials, apiKey: e.target.value})}\n                      className=\"w-full px-3 py-2 border rounded pr-10 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      required\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => toggleCredentialVisibility('apiKey')}\n                      className=\"absolute right-3 top-2.5 text-gray-400 hover:text-gray-600\"\n                    >\n                      {showCredentials.apiKey ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                    </button>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">Secret Key *</label>\n                  <div className=\"relative\">\n                    <input\n                      type={showCredentials.secretKey ? 'text' : 'password'}\n                      value={credentials.secretKey}\n                      onChange={(e) => setCredentials({...credentials, secretKey: e.target.value})}\n                      className=\"w-full px-3 py-2 border rounded pr-10 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      required\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => toggleCredentialVisibility('secretKey')}\n                      className=\"absolute right-3 top-2.5 text-gray-400 hover:text-gray-600\"\n                    >\n                      {showCredentials.secretKey ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                    </button>\n                  </div>\n                </div>\n\n                {selectedExchange.requiredCredentials.includes('passphrase') && (\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">Passphrase *</label>\n                    <div className=\"relative\">\n                      <input\n                        type={showCredentials.passphrase ? 'text' : 'password'}\n                        value={credentials.passphrase || ''}\n                        onChange={(e) => setCredentials({...credentials, passphrase: e.target.value})}\n                        className=\"w-full px-3 py-2 border rounded pr-10 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        required\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => toggleCredentialVisibility('passphrase')}\n                        className=\"absolute right-3 top-2.5 text-gray-400 hover:text-gray-600\"\n                      >\n                        {showCredentials.passphrase ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                      </button>\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"sandbox\"\n                    checked={credentials.sandbox}\n                    onChange={(e) => setCredentials({...credentials, sandbox: e.target.checked})}\n                    className=\"mr-2\"\n                  />\n                  <label htmlFor=\"sandbox\" className=\"text-sm\">Use Sandbox/Testnet</label>\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <button\n                    onClick={() => {\n                      setShowAddModal(false);\n                      setSelectedExchange(null);\n                      setCredentials({ apiKey: '', secretKey: '', passphrase: '', sandbox: false });\n                      setError('');\n                    }}\n                    className=\"flex-1 px-4 py-2 border rounded hover:bg-gray-50 transition-colors\"\n                  >\n                    Cancel\n                  </button>\n                  <button\n                    onClick={connectExchange}\n                    disabled={loading || !credentials.apiKey || !credentials.secretKey}\n                    className=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:bg-gray-300 transition-colors\"\n                  >\n                    {loading ? 'Connecting...' : 'Connect'}\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}